#include <vector>

vector <int> v : int형을 가지는 v 생성
vector <int> v(5) : 기본값0으로 초기화 된 5개 원소를 가지는 v생성
vector<int> v(5,2) : 2로 초기화된 5개의 원소를 가지는 v생성
vector<int> v2(v1) : v2는 v1을 복사해서 생성

연산자로 대소비교 가능

v.assign(5, 2) : 2의 값으로 5개의 원소 할당
----(만약 vector가 string형이면 v.assign()은 v.assign(new size, string)으로 계산된다. 따라서 v.assign(5, " ")이렇게 써야한다.)---
v.at(idx) : idx번째 원소를 리턴 (v[idx]보다 느리지만, 범위를 점검해서 안전)
v.front() : 첫번째 원소 리턴
v.back() : 마지막 원소 리턴
v.clear() : 모든 원소 제거(원소만 제거하고 메모리는 남아있다)
v.push_back(7) : 마지막 원소 뒤에 7 삽입
v.pop_back() : 마지막 원소 제거
v.begin() : 첫번째 원소 가리킴(iterator 와 같이 사용해야 한다)
v.end() : 마지막의 다음을 가리킴(iterator 와 같이 사용해야 한다)
v.rbegin() : reverse begin(거꾸로 돌려 첫번째 원소를 가리킴)
v.rend() : reverse end(거꾸로 돌려 마지막의 다음을 가리킴)
v.reserve(n) : n개의 원소를 저장할 위치를 예악(미리 동적할당)
v.resize(n) : 크기를 n으로 변경(크기가 기존보다 더 커질 경우 0으로 초기화)
v.resize(n,3) : 크기를 n으로 변경(크기가 기존보다 더 커질 경우 3으로 초기화)
v.size() : 원소 갯수 리턴
v.capacity() : 할당된 공간의 크기 리턴
v2.swap(v1) : v1과 v2의 원소와 capacity()를 바꿔줌(모든걸 바꿔줌)(v1의 할당된 메모리를 없얼때 사용(프로그램이 끝나기 전에 없애고 싶을때도)
              v2를 capacity가 0인 임시 객체로 만들어서 스왑
v.insert(2,3,4) : 2번째 위치에 3개의 4값을 삽입(뒤의 원소들은 뒤로 밀린다.
v.insert(2,3) : 2번째 위치에 3의 값을 삽입
v.erase(iter) : iter가 가리키는 원소를 제거(원소만 사라지고 메모리는 남음)
v.empty() : v가 비어있으면 true 리턴(원소가 0이지 메모리와는 상관없다)

---------------------------------------------------------------------------------------------------------------------
iterator(반복자) : 포인터와 비슷한 개념, 컨테이너(Vector)에 저장된 원소를 순회하고 접근하는 방법을 제공 
vector<string>::iterator iter;  <- 선언
iter = vector.begin() : vector의 시작점을 지정


ex)

vector<string> students_list; 
students_list.push_back("stanly");
students_list.push_back("john");
students_list.push_back("lala");
vector<string>::iterator iter = students_list.begin();
cout << *iter << endl;     //출력결과 : stanly

vector<string>::iterator iter; 
for(iter=students_list.begin();iter != students_list.end();iter++)
   cout << *iter << endl;   //출력결과 :  stanly john lala
   
v.push_back(4);
v.push_back(9);
v.push_back(17);

vector<int>::iterator p;
                             //insert함수는 iterator와 값을 넘겨주면 그 위치에 새로 값을 넣고 기존에 있던 값들은 뒤로 한 칸씩 밀림
v.insert(v.begin()+1, 12);   //출력결과 : 4 12 9 17
v.insert(v.begin()+3, -8);   //출력결과 : 4 12 9 -8 17
v.insert(v.end(), 5);        //출력결과 : 4 12 9 -8 17 5
                             //erase함수는 iterator를 넘겨주면 그위치 값을 삭제하고 뒤의 값들은 한 칸씩 당겨준다.
v.erase(v.begin()+2);        //출력결과 : 4 12 -8 17 5
v.erase(v.end()-1);          //출력결과 : 4 12 -8 17
